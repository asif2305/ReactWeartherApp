{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","api","App","useState","query","setQuery","weather","setWeather","Customforcasts","setWeatherforcast","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","r","list","behavior","direction","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","src","icon","alt","Math","round","feels_like","temp_max","temp_min","humidity","wind","speed","description","length","map","forcast","index","dt_txt","style","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0058b642.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// source link :youtube.com/watch?v=GuA0_Z1llYU\nimport React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './index.css';\n\n//https://api.openweathermap.org/data/2.5/forecast?q=Dhaka&cnt=7&appid=c785ba882f7141ab07ad3b9b731c49ea\n\nconst api = {\n  key: 'c785ba882f7141ab07ad3b9b731c49ea',\n  base: 'https://api.openweathermap.org/data/2.5/',\n  image: 'http://openweathermap.org/img/w/'\n\n}\n\nfunction App() {\n  const [query, setQuery] = useState(''); // to set value in query\n  const [weather, setWeather] = useState({});\n  const [Customforcasts, setWeatherforcast] = useState({});\n\n  const search = evt => {\n    if (evt.key === 'Enter') {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          // setQuery('');\n          console.log(result);\n          //  console.log(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`);\n\n        });\n\n      // to get forcast data\n      fetch(`${api.base}forecast?q=${query}&cnt=39&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(r => {\n          setWeatherforcast(r.list);\n          setQuery('');\n          // console.log('gffgfg' + r.list[0].main.temp)\n\n        });\n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()]\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`\n  }\n  return (\n\n    <div className=\"app\">\n\n      <div className={(typeof weather.main != 'undefined')\n        ? ((weather.main.temp > 16)\n          ? 'app warm' : 'app')\n        : 'app'}>\n        <main>\n          <div className=\"search-box\">\n            <input type=\"text\" className=\"search-bar\" placeholder=\"search...\"\n              onChange={e => setQuery(e.target.value)}\n              value={query} onKeyPress={search}\n            ></input>\n          </div>\n\n          {(typeof weather.main != 'undefined') ? (\n            <div>\n              <div className=\"location-alert\">\n                <marquee behavior=\"scroll\" direction=\"right\">5 Days Weather Forecasting For Any Country ...!</marquee>\n              </div>\n              <div className=\"location-box\">\n                <div className=\"location\">{weather.name} ,{weather.sys.country}</div>\n                <div className=\"date\">\n                  {dateBuilder(new Date())}\n                </div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\"><img className='blink-image' src={api.image + weather.weather[0].icon + '.png'} alt=''></img>{Math.round(weather.main.temp)}°c</div><br></br>\n                <div className=\"temp_children\"><p>Feel like</p>{Math.round(weather.main.feels_like)}°c</div>\n                <div className=\"temp_children\"><p>Max</p>{Math.round(weather.main.temp_max)}°c</div>\n                <div className=\"temp_children\"><p>Min</p>{Math.round(weather.main.temp_min)}°c</div>\n                <div className=\"temp_children\"><p>Humidity</p>{Math.round(weather.main.humidity)} %</div>\n                <div className=\"temp_children\"><p>Wind</p>{Math.round(weather.wind.speed)} km/h</div>\n                <div className=\"weather blink-image\">{weather.weather[0].description}</div>\n              </div>\n              <div className=\"weather-box\">\n\n                {\n                  (Customforcasts.length > 0) ?\n                    Customforcasts.map((forcast, index) => (\n                      <div className='temp_child'>\n                        <p>{forcast.dt_txt}</p>\n                        <img className='blink-image' src={api.image + forcast.weather[0].icon + '.png'} alt=''></img>\n                        <span className='blink-image' style={{ color: 'blue' }}>{forcast.weather[0].description}</span>\n                        <div className='container'>\n                          <p>Feel like : {Math.round(forcast.main.feels_like)}°c </p>\n                          <p>Max : {Math.round(forcast.main.temp_max)}°c </p>\n                          <p>Min : {Math.round(forcast.main.temp_min)}°c </p>\n                          <p>Humidity: {Math.round(forcast.main.humidity)} % </p>\n                          <p>Wind: {Math.round(forcast.wind.speed)} km/h </p>\n                        </div>\n                      </div>\n                    )) : ('')}\n\n              </div>\n            </div>\n          ) : ('')}\n\n        </main>\n      </div>\n      :('No data found')}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}